package com.company;
import java.math.BigInteger;
import java.util.*;
public class Main {

    public static void main(String[] args) {
//        Each new term in the Fibonacci sequence is generated by adding
//        the previous two terms. By starting with 1 and 2, the first 10 terms
//        will be:
//        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//        Write a Java program which prints out the 1,000th term of the
//        above Fibonacci sequence.
        BigInteger ar [] = new BigInteger[1001];
        //long ar[] = new long[1001];
        System.out.println(fibonacci(1000,ar));
    }
    public static BigInteger fibonacci(int n, BigInteger ar[]){
        //System.out.println("Getting fib of "+n);
        if(n == 1){
            ar[1]=BigInteger.ONE;
            return BigInteger.ONE;
        }
        if(n == 2){
            ar[2]=BigInteger.TWO;
            return BigInteger.TWO;
        }
        //prevents deep recursion
        if(ar[n] != null){
            //System.out.println("Found previous answer");
            return ar[n];
        }
        //System.out.println("Adding "+fibonacci(n-2,ar)+"to" +fibonacci(n-1,ar));
        //System.out.println("Result: "+fibonacci(n-2,ar).add(fibonacci(n-1,ar)));

        //store the sum of the last two numbers for current n
        ar[n] = fibonacci(n-2,ar).add(fibonacci(n-1,ar));
        return ar[n];
    }
}
